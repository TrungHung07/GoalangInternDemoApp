// Code generated by ent, DO NOT EDIT.

package ent

import (
	"DemoApp/ent/history"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HistoryCreate is the builder for creating a History entity.
type HistoryCreate struct {
	config
	mutation *HistoryMutation
	hooks    []Hook
}

// SetTableName sets the "table_name" field.
func (hc *HistoryCreate) SetTableName(s string) *HistoryCreate {
	hc.mutation.SetTableName(s)
	return hc
}

// SetRecordID sets the "record_id" field.
func (hc *HistoryCreate) SetRecordID(s string) *HistoryCreate {
	hc.mutation.SetRecordID(s)
	return hc
}

// SetAction sets the "action" field.
func (hc *HistoryCreate) SetAction(s string) *HistoryCreate {
	hc.mutation.SetAction(s)
	return hc
}

// SetOldData sets the "old_data" field.
func (hc *HistoryCreate) SetOldData(m map[string]interface{}) *HistoryCreate {
	hc.mutation.SetOldData(m)
	return hc
}

// SetNewData sets the "new_data" field.
func (hc *HistoryCreate) SetNewData(m map[string]interface{}) *HistoryCreate {
	hc.mutation.SetNewData(m)
	return hc
}

// SetUserID sets the "user_id" field.
func (hc *HistoryCreate) SetUserID(s string) *HistoryCreate {
	hc.mutation.SetUserID(s)
	return hc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableUserID(s *string) *HistoryCreate {
	if s != nil {
		hc.SetUserID(*s)
	}
	return hc
}

// SetCreatedAt sets the "created_at" field.
func (hc *HistoryCreate) SetCreatedAt(t time.Time) *HistoryCreate {
	hc.mutation.SetCreatedAt(t)
	return hc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableCreatedAt(t *time.Time) *HistoryCreate {
	if t != nil {
		hc.SetCreatedAt(*t)
	}
	return hc
}

// SetMetadata sets the "metadata" field.
func (hc *HistoryCreate) SetMetadata(m map[string]interface{}) *HistoryCreate {
	hc.mutation.SetMetadata(m)
	return hc
}

// SetID sets the "id" field.
func (hc *HistoryCreate) SetID(s string) *HistoryCreate {
	hc.mutation.SetID(s)
	return hc
}

// Mutation returns the HistoryMutation object of the builder.
func (hc *HistoryCreate) Mutation() *HistoryMutation {
	return hc.mutation
}

// Save creates the History in the database.
func (hc *HistoryCreate) Save(ctx context.Context) (*History, error) {
	hc.defaults()
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HistoryCreate) SaveX(ctx context.Context) *History {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HistoryCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HistoryCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HistoryCreate) defaults() {
	if _, ok := hc.mutation.CreatedAt(); !ok {
		v := history.DefaultCreatedAt()
		hc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HistoryCreate) check() error {
	if _, ok := hc.mutation.TableName(); !ok {
		return &ValidationError{Name: "table_name", err: errors.New(`ent: missing required field "History.table_name"`)}
	}
	if _, ok := hc.mutation.RecordID(); !ok {
		return &ValidationError{Name: "record_id", err: errors.New(`ent: missing required field "History.record_id"`)}
	}
	if _, ok := hc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "History.action"`)}
	}
	if _, ok := hc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "History.created_at"`)}
	}
	return nil
}

func (hc *HistoryCreate) sqlSave(ctx context.Context) (*History, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected History.ID type: %T", _spec.ID.Value)
		}
	}
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HistoryCreate) createSpec() (*History, *sqlgraph.CreateSpec) {
	var (
		_node = &History{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(history.Table, sqlgraph.NewFieldSpec(history.FieldID, field.TypeString))
	)
	if id, ok := hc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hc.mutation.TableName(); ok {
		_spec.SetField(history.FieldTableName, field.TypeString, value)
		_node.TableName = value
	}
	if value, ok := hc.mutation.RecordID(); ok {
		_spec.SetField(history.FieldRecordID, field.TypeString, value)
		_node.RecordID = value
	}
	if value, ok := hc.mutation.Action(); ok {
		_spec.SetField(history.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := hc.mutation.OldData(); ok {
		_spec.SetField(history.FieldOldData, field.TypeJSON, value)
		_node.OldData = value
	}
	if value, ok := hc.mutation.NewData(); ok {
		_spec.SetField(history.FieldNewData, field.TypeJSON, value)
		_node.NewData = value
	}
	if value, ok := hc.mutation.UserID(); ok {
		_spec.SetField(history.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := hc.mutation.CreatedAt(); ok {
		_spec.SetField(history.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hc.mutation.Metadata(); ok {
		_spec.SetField(history.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	return _node, _spec
}

// HistoryCreateBulk is the builder for creating many History entities in bulk.
type HistoryCreateBulk struct {
	config
	err      error
	builders []*HistoryCreate
}

// Save creates the History entities in the database.
func (hcb *HistoryCreateBulk) Save(ctx context.Context) ([]*History, error) {
	if hcb.err != nil {
		return nil, hcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*History, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HistoryCreateBulk) SaveX(ctx context.Context) []*History {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HistoryCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
