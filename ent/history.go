// Code generated by ent, DO NOT EDIT.

package ent

import (
	"DemoApp/ent/history"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// History is the model entity for the History schema.
type History struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Tên bảng được thao tác
	TableName string `json:"table_name,omitempty"`
	// ID của record được thao tác
	RecordID string `json:"record_id,omitempty"`
	// Loại thao tác: INSERT, UPDATE, DELETE
	Action string `json:"action,omitempty"`
	// Dữ liệu cũ (cho UPDATE/DELETE)
	OldData map[string]interface{} `json:"old_data,omitempty"`
	// Dữ liệu mới (cho INSERT/UPDATE)
	NewData map[string]interface{} `json:"new_data,omitempty"`
	// ID user thực hiện thao tác
	UserID string `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Thông tin bổ sung
	Metadata     map[string]interface{} `json:"metadata,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*History) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case history.FieldOldData, history.FieldNewData, history.FieldMetadata:
			values[i] = new([]byte)
		case history.FieldID, history.FieldTableName, history.FieldRecordID, history.FieldAction, history.FieldUserID:
			values[i] = new(sql.NullString)
		case history.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the History fields.
func (h *History) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case history.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				h.ID = value.String
			}
		case history.FieldTableName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table_name", values[i])
			} else if value.Valid {
				h.TableName = value.String
			}
		case history.FieldRecordID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field record_id", values[i])
			} else if value.Valid {
				h.RecordID = value.String
			}
		case history.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				h.Action = value.String
			}
		case history.FieldOldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field old_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.OldData); err != nil {
					return fmt.Errorf("unmarshal field old_data: %w", err)
				}
			}
		case history.FieldNewData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field new_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.NewData); err != nil {
					return fmt.Errorf("unmarshal field new_data: %w", err)
				}
			}
		case history.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				h.UserID = value.String
			}
		case history.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				h.CreatedAt = value.Time
			}
		case history.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the History.
// This includes values selected through modifiers, order, etc.
func (h *History) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// Update returns a builder for updating this History.
// Note that you need to call History.Unwrap() before calling this method if this History
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *History) Update() *HistoryUpdateOne {
	return NewHistoryClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the History entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *History) Unwrap() *History {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: History is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *History) String() string {
	var builder strings.Builder
	builder.WriteString("History(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("table_name=")
	builder.WriteString(h.TableName)
	builder.WriteString(", ")
	builder.WriteString("record_id=")
	builder.WriteString(h.RecordID)
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(h.Action)
	builder.WriteString(", ")
	builder.WriteString("old_data=")
	builder.WriteString(fmt.Sprintf("%v", h.OldData))
	builder.WriteString(", ")
	builder.WriteString("new_data=")
	builder.WriteString(fmt.Sprintf("%v", h.NewData))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(h.UserID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(h.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", h.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// Histories is a parsable slice of History.
type Histories []*History
