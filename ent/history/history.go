// Code generated by ent, DO NOT EDIT.

package history

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the history type in the database.
	Label = "history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTableName holds the string denoting the table_name field in the database.
	FieldTableName = "table_name"
	// FieldRecordID holds the string denoting the record_id field in the database.
	FieldRecordID = "record_id"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// FieldOldData holds the string denoting the old_data field in the database.
	FieldOldData = "old_data"
	// FieldNewData holds the string denoting the new_data field in the database.
	FieldNewData = "new_data"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// Table holds the table name of the history in the database.
	Table = "histories"
)

// Columns holds all SQL columns for history fields.
var Columns = []string{
	FieldID,
	FieldTableName,
	FieldRecordID,
	FieldAction,
	FieldOldData,
	FieldNewData,
	FieldUserID,
	FieldCreatedAt,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the History queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTableName orders the results by the table_name field.
func ByTableName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName, opts...).ToFunc()
}

// ByRecordID orders the results by the record_id field.
func ByRecordID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecordID, opts...).ToFunc()
}

// ByAction orders the results by the action field.
func ByAction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAction, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
