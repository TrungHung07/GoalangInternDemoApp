// Code generated by ent, DO NOT EDIT.

package history

import (
	"DemoApp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.History {
	return predicate.History(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.History {
	return predicate.History(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldID, id))
}

// TableName applies equality check predicate on the "table_name" field. It's identical to TableNameEQ.
func TableName(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldTableName, v))
}

// RecordID applies equality check predicate on the "record_id" field. It's identical to RecordIDEQ.
func RecordID(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldRecordID, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldAction, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldUserID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldCreatedAt, v))
}

// TableNameEQ applies the EQ predicate on the "table_name" field.
func TableNameEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldTableName, v))
}

// TableNameNEQ applies the NEQ predicate on the "table_name" field.
func TableNameNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldTableName, v))
}

// TableNameIn applies the In predicate on the "table_name" field.
func TableNameIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldTableName, vs...))
}

// TableNameNotIn applies the NotIn predicate on the "table_name" field.
func TableNameNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldTableName, vs...))
}

// TableNameGT applies the GT predicate on the "table_name" field.
func TableNameGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldTableName, v))
}

// TableNameGTE applies the GTE predicate on the "table_name" field.
func TableNameGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldTableName, v))
}

// TableNameLT applies the LT predicate on the "table_name" field.
func TableNameLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldTableName, v))
}

// TableNameLTE applies the LTE predicate on the "table_name" field.
func TableNameLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldTableName, v))
}

// TableNameContains applies the Contains predicate on the "table_name" field.
func TableNameContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldTableName, v))
}

// TableNameHasPrefix applies the HasPrefix predicate on the "table_name" field.
func TableNameHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldTableName, v))
}

// TableNameHasSuffix applies the HasSuffix predicate on the "table_name" field.
func TableNameHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldTableName, v))
}

// TableNameEqualFold applies the EqualFold predicate on the "table_name" field.
func TableNameEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldTableName, v))
}

// TableNameContainsFold applies the ContainsFold predicate on the "table_name" field.
func TableNameContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldTableName, v))
}

// RecordIDEQ applies the EQ predicate on the "record_id" field.
func RecordIDEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldRecordID, v))
}

// RecordIDNEQ applies the NEQ predicate on the "record_id" field.
func RecordIDNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldRecordID, v))
}

// RecordIDIn applies the In predicate on the "record_id" field.
func RecordIDIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldRecordID, vs...))
}

// RecordIDNotIn applies the NotIn predicate on the "record_id" field.
func RecordIDNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldRecordID, vs...))
}

// RecordIDGT applies the GT predicate on the "record_id" field.
func RecordIDGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldRecordID, v))
}

// RecordIDGTE applies the GTE predicate on the "record_id" field.
func RecordIDGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldRecordID, v))
}

// RecordIDLT applies the LT predicate on the "record_id" field.
func RecordIDLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldRecordID, v))
}

// RecordIDLTE applies the LTE predicate on the "record_id" field.
func RecordIDLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldRecordID, v))
}

// RecordIDContains applies the Contains predicate on the "record_id" field.
func RecordIDContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldRecordID, v))
}

// RecordIDHasPrefix applies the HasPrefix predicate on the "record_id" field.
func RecordIDHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldRecordID, v))
}

// RecordIDHasSuffix applies the HasSuffix predicate on the "record_id" field.
func RecordIDHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldRecordID, v))
}

// RecordIDEqualFold applies the EqualFold predicate on the "record_id" field.
func RecordIDEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldRecordID, v))
}

// RecordIDContainsFold applies the ContainsFold predicate on the "record_id" field.
func RecordIDContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldRecordID, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldAction, v))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldAction, v))
}

// OldDataIsNil applies the IsNil predicate on the "old_data" field.
func OldDataIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldOldData))
}

// OldDataNotNil applies the NotNil predicate on the "old_data" field.
func OldDataNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldOldData))
}

// NewDataIsNil applies the IsNil predicate on the "new_data" field.
func NewDataIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldNewData))
}

// NewDataNotNil applies the NotNil predicate on the "new_data" field.
func NewDataNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldNewData))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldUserID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.History {
	return predicate.History(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.History {
	return predicate.History(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldLTE(FieldCreatedAt, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.History {
	return predicate.History(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.History {
	return predicate.History(sql.FieldNotNull(FieldMetadata))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.History) predicate.History {
	return predicate.History(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.History) predicate.History {
	return predicate.History(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.History) predicate.History {
	return predicate.History(sql.NotPredicates(p))
}
