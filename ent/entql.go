// Code generated by ent, DO NOT EDIT.

package ent

import (
	"DemoApp/ent/class"
	"DemoApp/ent/history"
	"DemoApp/ent/predicate"
	"DemoApp/ent/student"
	"DemoApp/ent/teacher"
	"DemoApp/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 5)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   class.Table,
			Columns: class.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: class.FieldID,
			},
		},
		Type: "Class",
		Fields: map[string]*sqlgraph.FieldSpec{
			class.FieldName:      {Type: field.TypeString, Column: class.FieldName},
			class.FieldGrade:     {Type: field.TypeInt64, Column: class.FieldGrade},
			class.FieldIsDeleted: {Type: field.TypeBool, Column: class.FieldIsDeleted},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   history.Table,
			Columns: history.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: history.FieldID,
			},
		},
		Type: "History",
		Fields: map[string]*sqlgraph.FieldSpec{
			history.FieldTableName: {Type: field.TypeString, Column: history.FieldTableName},
			history.FieldRecordID:  {Type: field.TypeString, Column: history.FieldRecordID},
			history.FieldAction:    {Type: field.TypeString, Column: history.FieldAction},
			history.FieldOldData:   {Type: field.TypeJSON, Column: history.FieldOldData},
			history.FieldNewData:   {Type: field.TypeJSON, Column: history.FieldNewData},
			history.FieldUserID:    {Type: field.TypeString, Column: history.FieldUserID},
			history.FieldCreatedAt: {Type: field.TypeTime, Column: history.FieldCreatedAt},
			history.FieldMetadata:  {Type: field.TypeJSON, Column: history.FieldMetadata},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   student.Table,
			Columns: student.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: student.FieldID,
			},
		},
		Type: "Student",
		Fields: map[string]*sqlgraph.FieldSpec{
			student.FieldName:      {Type: field.TypeString, Column: student.FieldName},
			student.FieldClassID:   {Type: field.TypeInt, Column: student.FieldClassID},
			student.FieldIsDeleted: {Type: field.TypeBool, Column: student.FieldIsDeleted},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   teacher.Table,
			Columns: teacher.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: teacher.FieldID,
			},
		},
		Type: "Teacher",
		Fields: map[string]*sqlgraph.FieldSpec{
			teacher.FieldName:      {Type: field.TypeString, Column: teacher.FieldName},
			teacher.FieldEmail:     {Type: field.TypeString, Column: teacher.FieldEmail},
			teacher.FieldClassID:   {Type: field.TypeInt, Column: teacher.FieldClassID},
			teacher.FieldAge:       {Type: field.TypeInt, Column: teacher.FieldAge},
			teacher.FieldIsDeleted: {Type: field.TypeBool, Column: teacher.FieldIsDeleted},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type:   "User",
		Fields: map[string]*sqlgraph.FieldSpec{},
	}
	graph.MustAddE(
		"students",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   class.StudentsTable,
			Columns: []string{class.StudentsColumn},
			Bidi:    false,
		},
		"Class",
		"Student",
	)
	graph.MustAddE(
		"teachers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   class.TeachersTable,
			Columns: []string{class.TeachersColumn},
			Bidi:    false,
		},
		"Class",
		"Teacher",
	)
	graph.MustAddE(
		"classes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   student.ClassesTable,
			Columns: []string{student.ClassesColumn},
			Bidi:    false,
		},
		"Student",
		"Class",
	)
	graph.MustAddE(
		"classes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teacher.ClassesTable,
			Columns: []string{teacher.ClassesColumn},
			Bidi:    false,
		},
		"Teacher",
		"Class",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cq *ClassQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ClassQuery builder.
func (cq *ClassQuery) Filter() *ClassFilter {
	return &ClassFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ClassMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ClassMutation builder.
func (m *ClassMutation) Filter() *ClassFilter {
	return &ClassFilter{config: m.config, predicateAdder: m}
}

// ClassFilter provides a generic filtering capability at runtime for ClassQuery.
type ClassFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ClassFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ClassFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(class.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ClassFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(class.FieldName))
}

// WhereGrade applies the entql int64 predicate on the grade field.
func (f *ClassFilter) WhereGrade(p entql.Int64P) {
	f.Where(p.Field(class.FieldGrade))
}

// WhereIsDeleted applies the entql bool predicate on the is_deleted field.
func (f *ClassFilter) WhereIsDeleted(p entql.BoolP) {
	f.Where(p.Field(class.FieldIsDeleted))
}

// WhereHasStudents applies a predicate to check if query has an edge students.
func (f *ClassFilter) WhereHasStudents() {
	f.Where(entql.HasEdge("students"))
}

// WhereHasStudentsWith applies a predicate to check if query has an edge students with a given conditions (other predicates).
func (f *ClassFilter) WhereHasStudentsWith(preds ...predicate.Student) {
	f.Where(entql.HasEdgeWith("students", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTeachers applies a predicate to check if query has an edge teachers.
func (f *ClassFilter) WhereHasTeachers() {
	f.Where(entql.HasEdge("teachers"))
}

// WhereHasTeachersWith applies a predicate to check if query has an edge teachers with a given conditions (other predicates).
func (f *ClassFilter) WhereHasTeachersWith(preds ...predicate.Teacher) {
	f.Where(entql.HasEdgeWith("teachers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (hq *HistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	hq.predicates = append(hq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HistoryQuery builder.
func (hq *HistoryQuery) Filter() *HistoryFilter {
	return &HistoryFilter{config: hq.config, predicateAdder: hq}
}

// addPredicate implements the predicateAdder interface.
func (m *HistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HistoryMutation builder.
func (m *HistoryMutation) Filter() *HistoryFilter {
	return &HistoryFilter{config: m.config, predicateAdder: m}
}

// HistoryFilter provides a generic filtering capability at runtime for HistoryQuery.
type HistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *HistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(history.FieldID))
}

// WhereTableName applies the entql string predicate on the table_name field.
func (f *HistoryFilter) WhereTableName(p entql.StringP) {
	f.Where(p.Field(history.FieldTableName))
}

// WhereRecordID applies the entql string predicate on the record_id field.
func (f *HistoryFilter) WhereRecordID(p entql.StringP) {
	f.Where(p.Field(history.FieldRecordID))
}

// WhereAction applies the entql string predicate on the action field.
func (f *HistoryFilter) WhereAction(p entql.StringP) {
	f.Where(p.Field(history.FieldAction))
}

// WhereOldData applies the entql json.RawMessage predicate on the old_data field.
func (f *HistoryFilter) WhereOldData(p entql.BytesP) {
	f.Where(p.Field(history.FieldOldData))
}

// WhereNewData applies the entql json.RawMessage predicate on the new_data field.
func (f *HistoryFilter) WhereNewData(p entql.BytesP) {
	f.Where(p.Field(history.FieldNewData))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *HistoryFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(history.FieldUserID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(history.FieldCreatedAt))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *HistoryFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(history.FieldMetadata))
}

// addPredicate implements the predicateAdder interface.
func (sq *StudentQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StudentQuery builder.
func (sq *StudentQuery) Filter() *StudentFilter {
	return &StudentFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StudentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StudentMutation builder.
func (m *StudentMutation) Filter() *StudentFilter {
	return &StudentFilter{config: m.config, predicateAdder: m}
}

// StudentFilter provides a generic filtering capability at runtime for StudentQuery.
type StudentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StudentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *StudentFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(student.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *StudentFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(student.FieldName))
}

// WhereClassID applies the entql int predicate on the class_id field.
func (f *StudentFilter) WhereClassID(p entql.IntP) {
	f.Where(p.Field(student.FieldClassID))
}

// WhereIsDeleted applies the entql bool predicate on the is_deleted field.
func (f *StudentFilter) WhereIsDeleted(p entql.BoolP) {
	f.Where(p.Field(student.FieldIsDeleted))
}

// WhereHasClasses applies a predicate to check if query has an edge classes.
func (f *StudentFilter) WhereHasClasses() {
	f.Where(entql.HasEdge("classes"))
}

// WhereHasClassesWith applies a predicate to check if query has an edge classes with a given conditions (other predicates).
func (f *StudentFilter) WhereHasClassesWith(preds ...predicate.Class) {
	f.Where(entql.HasEdgeWith("classes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TeacherQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TeacherQuery builder.
func (tq *TeacherQuery) Filter() *TeacherFilter {
	return &TeacherFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TeacherMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TeacherMutation builder.
func (m *TeacherMutation) Filter() *TeacherFilter {
	return &TeacherFilter{config: m.config, predicateAdder: m}
}

// TeacherFilter provides a generic filtering capability at runtime for TeacherQuery.
type TeacherFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TeacherFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TeacherFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(teacher.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TeacherFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(teacher.FieldName))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *TeacherFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(teacher.FieldEmail))
}

// WhereClassID applies the entql int predicate on the class_id field.
func (f *TeacherFilter) WhereClassID(p entql.IntP) {
	f.Where(p.Field(teacher.FieldClassID))
}

// WhereAge applies the entql int predicate on the age field.
func (f *TeacherFilter) WhereAge(p entql.IntP) {
	f.Where(p.Field(teacher.FieldAge))
}

// WhereIsDeleted applies the entql bool predicate on the is_deleted field.
func (f *TeacherFilter) WhereIsDeleted(p entql.BoolP) {
	f.Where(p.Field(teacher.FieldIsDeleted))
}

// WhereHasClasses applies a predicate to check if query has an edge classes.
func (f *TeacherFilter) WhereHasClasses() {
	f.Where(entql.HasEdge("classes"))
}

// WhereHasClassesWith applies a predicate to check if query has an edge classes with a given conditions (other predicates).
func (f *TeacherFilter) WhereHasClassesWith(preds ...predicate.Class) {
	f.Where(entql.HasEdgeWith("classes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}
