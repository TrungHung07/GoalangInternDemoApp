// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"DemoApp/internal/biz"
	"DemoApp/internal/conf"
	"DemoApp/internal/data"
	"DemoApp/internal/server"
	"DemoApp/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "github.com/joho/godotenv"
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wire ./cmd/DemoApp
// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	data_Redis := data.NewRedisConfig(confData)
	client := data.NewRedisClient(data_Redis)
	v := data.ProvideKafkaBrokers()
	string2 := data.ProvideKafkaTopic()
	kafkaProducer, err := data.NewKafkaProducer(v, string2, logger)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(confData, client, logger, kafkaProducer)
	if err != nil {
		return nil, nil, err
	}
	teacherRepo := data.NewTeacherRepo(dataData, logger)
	teacherUseCase := biz.NewTeacherUsecase(teacherRepo, logger)
	teacherServiceService := service.NewTeacherServiceService(dataData, teacherUseCase, logger)
	historyRepo := data.NewHistoryRepo(dataData)
	historyEventPublisher := data.NewKafkaHistoryPublisher(kafkaProducer)
	historyUsecase := biz.NewHistoryUsecase(historyRepo, historyEventPublisher, logger)
	historyHelper := data.NewHistoryHelper(historyUsecase)
	classServiceService := service.NewClassServiceService(dataData, logger, historyHelper)
	studentServiceService := service.NewStudentServiceService(dataData, logger, historyHelper)
	grpcServer := server.NewGRPCServer(confServer, logger, teacherServiceService, classServiceService, studentServiceService)
	httpServer := server.NewHTTPServer(confServer, logger, classServiceService, studentServiceService, teacherServiceService)
	kafkaBrokers := service.ProvideKafkaBrokers()
	kafkaGroupID := service.ProvideKafkaGroupID()
	kafkaTopic := service.ProvideKafkaTopic()
	historyConsumer, err := service.NewHistoryConsumer(kafkaBrokers, kafkaGroupID, kafkaTopic, historyUsecase, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	app := newApp(logger, grpcServer, httpServer, historyConsumer)
	return app, func() {
		cleanup()
	}, nil
}
