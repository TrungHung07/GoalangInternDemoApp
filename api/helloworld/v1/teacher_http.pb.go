// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: api/helloworld/v1/teacher.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTeacherServiceCreateTeacher = "/helloworld.v1.TeacherService/CreateTeacher"
const OperationTeacherServiceDeleteTeacher = "/helloworld.v1.TeacherService/DeleteTeacher"
const OperationTeacherServiceGetTeacher = "/helloworld.v1.TeacherService/GetTeacher"
const OperationTeacherServiceListTeachers = "/helloworld.v1.TeacherService/ListTeachers"
const OperationTeacherServiceUpdateTeacher = "/helloworld.v1.TeacherService/UpdateTeacher"

type TeacherServiceHTTPServer interface {
	CreateTeacher(context.Context, *CreateTeacherRequest) (*CreateTeacherReply, error)
	DeleteTeacher(context.Context, *DeleteTeacherRequest) (*DeleteTeacherReply, error)
	GetTeacher(context.Context, *GetTeacherRequest) (*TeacherReply, error)
	ListTeachers(context.Context, *ListTeachersRequest) (*ListTeachersReply, error)
	UpdateTeacher(context.Context, *UpdateTeacherRequest) (*UpdateTeacherReply, error)
}

func RegisterTeacherServiceHTTPServer(s *http.Server, srv TeacherServiceHTTPServer) {
	r := s.Route("/")
	r.GET("api/v1/teacher/{id}", _TeacherService_GetTeacher0_HTTP_Handler(srv))
	r.POST("api/v1/teacher", _TeacherService_CreateTeacher0_HTTP_Handler(srv))
	r.POST("api/v1/teacher/list", _TeacherService_ListTeachers0_HTTP_Handler(srv))
	r.PUT("api/v1/teacher", _TeacherService_UpdateTeacher0_HTTP_Handler(srv))
	r.DELETE("api/v1/teacher/{id}", _TeacherService_DeleteTeacher0_HTTP_Handler(srv))
}

func _TeacherService_GetTeacher0_HTTP_Handler(srv TeacherServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTeacherRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeacherServiceGetTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTeacher(ctx, req.(*GetTeacherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TeacherReply)
		return ctx.Result(200, reply)
	}
}

func _TeacherService_CreateTeacher0_HTTP_Handler(srv TeacherServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTeacherRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeacherServiceCreateTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTeacher(ctx, req.(*CreateTeacherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTeacherReply)
		return ctx.Result(200, reply)
	}
}

func _TeacherService_ListTeachers0_HTTP_Handler(srv TeacherServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTeachersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeacherServiceListTeachers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTeachers(ctx, req.(*ListTeachersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTeachersReply)
		return ctx.Result(200, reply)
	}
}

func _TeacherService_UpdateTeacher0_HTTP_Handler(srv TeacherServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTeacherRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeacherServiceUpdateTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTeacher(ctx, req.(*UpdateTeacherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTeacherReply)
		return ctx.Result(200, reply)
	}
}

func _TeacherService_DeleteTeacher0_HTTP_Handler(srv TeacherServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTeacherRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTeacherServiceDeleteTeacher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTeacher(ctx, req.(*DeleteTeacherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTeacherReply)
		return ctx.Result(200, reply)
	}
}

type TeacherServiceHTTPClient interface {
	CreateTeacher(ctx context.Context, req *CreateTeacherRequest, opts ...http.CallOption) (rsp *CreateTeacherReply, err error)
	DeleteTeacher(ctx context.Context, req *DeleteTeacherRequest, opts ...http.CallOption) (rsp *DeleteTeacherReply, err error)
	GetTeacher(ctx context.Context, req *GetTeacherRequest, opts ...http.CallOption) (rsp *TeacherReply, err error)
	ListTeachers(ctx context.Context, req *ListTeachersRequest, opts ...http.CallOption) (rsp *ListTeachersReply, err error)
	UpdateTeacher(ctx context.Context, req *UpdateTeacherRequest, opts ...http.CallOption) (rsp *UpdateTeacherReply, err error)
}

type TeacherServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewTeacherServiceHTTPClient(client *http.Client) TeacherServiceHTTPClient {
	return &TeacherServiceHTTPClientImpl{client}
}

func (c *TeacherServiceHTTPClientImpl) CreateTeacher(ctx context.Context, in *CreateTeacherRequest, opts ...http.CallOption) (*CreateTeacherReply, error) {
	var out CreateTeacherReply
	pattern := "api/v1/teacher"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTeacherServiceCreateTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TeacherServiceHTTPClientImpl) DeleteTeacher(ctx context.Context, in *DeleteTeacherRequest, opts ...http.CallOption) (*DeleteTeacherReply, error) {
	var out DeleteTeacherReply
	pattern := "api/v1/teacher/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTeacherServiceDeleteTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TeacherServiceHTTPClientImpl) GetTeacher(ctx context.Context, in *GetTeacherRequest, opts ...http.CallOption) (*TeacherReply, error) {
	var out TeacherReply
	pattern := "api/v1/teacher/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTeacherServiceGetTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TeacherServiceHTTPClientImpl) ListTeachers(ctx context.Context, in *ListTeachersRequest, opts ...http.CallOption) (*ListTeachersReply, error) {
	var out ListTeachersReply
	pattern := "api/v1/teacher/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTeacherServiceListTeachers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TeacherServiceHTTPClientImpl) UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, opts ...http.CallOption) (*UpdateTeacherReply, error) {
	var out UpdateTeacherReply
	pattern := "api/v1/teacher"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTeacherServiceUpdateTeacher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
