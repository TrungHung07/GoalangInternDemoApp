// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: api/helloworld/v1/studentservice.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationStudentServiceCreateStudent = "/helloworld.v1.StudentService/CreateStudent"
const OperationStudentServiceDeleteStudent = "/helloworld.v1.StudentService/DeleteStudent"
const OperationStudentServiceGetStudent = "/helloworld.v1.StudentService/GetStudent"
const OperationStudentServiceListStudent = "/helloworld.v1.StudentService/ListStudent"
const OperationStudentServiceUpdateStudent = "/helloworld.v1.StudentService/UpdateStudent"

type StudentServiceHTTPServer interface {
	CreateStudent(context.Context, *CreateStudentRequest) (*CreateStudentReply, error)
	DeleteStudent(context.Context, *DeleteStudentRequest) (*DeleteStudentReply, error)
	GetStudent(context.Context, *GetStudentRequest) (*GetStudentReply, error)
	ListStudent(context.Context, *ListStudentRequest) (*ListStudentReply, error)
	UpdateStudent(context.Context, *UpdateStudentRequest) (*UpdateStudentReply, error)
}

func RegisterStudentServiceHTTPServer(s *http.Server, srv StudentServiceHTTPServer) {
	r := s.Route("/")
	r.POST("api/v1/students", _StudentService_CreateStudent0_HTTP_Handler(srv))
	r.PUT("api/v1/students/{id}", _StudentService_UpdateStudent0_HTTP_Handler(srv))
	r.DELETE("api/v1/students/{id}", _StudentService_DeleteStudent0_HTTP_Handler(srv))
	r.POST("api/v1/students/list", _StudentService_ListStudent0_HTTP_Handler(srv))
	r.GET("api/v1/students/{id}", _StudentService_GetStudent0_HTTP_Handler(srv))
}

func _StudentService_CreateStudent0_HTTP_Handler(srv StudentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStudentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStudentServiceCreateStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStudent(ctx, req.(*CreateStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStudentReply)
		return ctx.Result(200, reply)
	}
}

func _StudentService_UpdateStudent0_HTTP_Handler(srv StudentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateStudentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStudentServiceUpdateStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateStudent(ctx, req.(*UpdateStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateStudentReply)
		return ctx.Result(200, reply)
	}
}

func _StudentService_DeleteStudent0_HTTP_Handler(srv StudentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteStudentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStudentServiceDeleteStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteStudent(ctx, req.(*DeleteStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteStudentReply)
		return ctx.Result(200, reply)
	}
}

func _StudentService_ListStudent0_HTTP_Handler(srv StudentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStudentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStudentServiceListStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStudent(ctx, req.(*ListStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStudentReply)
		return ctx.Result(200, reply)
	}
}

func _StudentService_GetStudent0_HTTP_Handler(srv StudentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStudentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStudentServiceGetStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStudent(ctx, req.(*GetStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStudentReply)
		return ctx.Result(200, reply)
	}
}

type StudentServiceHTTPClient interface {
	CreateStudent(ctx context.Context, req *CreateStudentRequest, opts ...http.CallOption) (rsp *CreateStudentReply, err error)
	DeleteStudent(ctx context.Context, req *DeleteStudentRequest, opts ...http.CallOption) (rsp *DeleteStudentReply, err error)
	GetStudent(ctx context.Context, req *GetStudentRequest, opts ...http.CallOption) (rsp *GetStudentReply, err error)
	ListStudent(ctx context.Context, req *ListStudentRequest, opts ...http.CallOption) (rsp *ListStudentReply, err error)
	UpdateStudent(ctx context.Context, req *UpdateStudentRequest, opts ...http.CallOption) (rsp *UpdateStudentReply, err error)
}

type StudentServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewStudentServiceHTTPClient(client *http.Client) StudentServiceHTTPClient {
	return &StudentServiceHTTPClientImpl{client}
}

func (c *StudentServiceHTTPClientImpl) CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...http.CallOption) (*CreateStudentReply, error) {
	var out CreateStudentReply
	pattern := "api/v1/students"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStudentServiceCreateStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StudentServiceHTTPClientImpl) DeleteStudent(ctx context.Context, in *DeleteStudentRequest, opts ...http.CallOption) (*DeleteStudentReply, error) {
	var out DeleteStudentReply
	pattern := "api/v1/students/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStudentServiceDeleteStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StudentServiceHTTPClientImpl) GetStudent(ctx context.Context, in *GetStudentRequest, opts ...http.CallOption) (*GetStudentReply, error) {
	var out GetStudentReply
	pattern := "api/v1/students/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStudentServiceGetStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StudentServiceHTTPClientImpl) ListStudent(ctx context.Context, in *ListStudentRequest, opts ...http.CallOption) (*ListStudentReply, error) {
	var out ListStudentReply
	pattern := "api/v1/students/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStudentServiceListStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StudentServiceHTTPClientImpl) UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...http.CallOption) (*UpdateStudentReply, error) {
	var out UpdateStudentReply
	pattern := "api/v1/students/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStudentServiceUpdateStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
