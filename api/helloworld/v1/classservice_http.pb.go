// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: api/helloworld/v1/classservice.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationClassServiceCreateClass = "/helloworld.v1.ClassService/CreateClass"
const OperationClassServiceDeleteClass = "/helloworld.v1.ClassService/DeleteClass"
const OperationClassServiceExportClassExcel = "/helloworld.v1.ClassService/ExportClassExcel"
const OperationClassServiceGetClass = "/helloworld.v1.ClassService/GetClass"
const OperationClassServiceListClass = "/helloworld.v1.ClassService/ListClass"
const OperationClassServiceUpdateClass = "/helloworld.v1.ClassService/UpdateClass"

type ClassServiceHTTPServer interface {
	// CreateClass Tạo mới lớp học
	CreateClass(context.Context, *CreateClassRequest) (*CreateClassReply, error)
	// DeleteClass Xóa lớp học
	DeleteClass(context.Context, *DeleteClassRequest) (*DeleteClassReply, error)
	ExportClassExcel(context.Context, *ExportClassExcelRequest) (*ExportClassExcelReply, error)
	// GetClass Lấy thông tin chi tiết của một lớp học
	GetClass(context.Context, *GetClassRequest) (*GetClassReply, error)
	// ListClass Lấy danh sách lớp học
	ListClass(context.Context, *ListClassRequest) (*ListClassReply, error)
	// UpdateClass Cập nhật thông tin lớp học
	UpdateClass(context.Context, *UpdateClassRequest) (*UpdateClassReply, error)
}

func RegisterClassServiceHTTPServer(s *http.Server, srv ClassServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/class", _ClassService_CreateClass0_HTTP_Handler(srv))
	r.PUT("/v1/class", _ClassService_UpdateClass0_HTTP_Handler(srv))
	r.PUT("/v1/class/delete", _ClassService_DeleteClass0_HTTP_Handler(srv))
	r.POST("/v1/class/list", _ClassService_ListClass0_HTTP_Handler(srv))
	r.GET("/v1/class/{id}", _ClassService_GetClass0_HTTP_Handler(srv))
	r.GET("/v1/class/export/{id}", _ClassService_ExportClassExcel0_HTTP_Handler(srv))
}

func _ClassService_CreateClass0_HTTP_Handler(srv ClassServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateClassRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClassServiceCreateClass)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateClass(ctx, req.(*CreateClassRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateClassReply)
		return ctx.Result(200, reply)
	}
}

func _ClassService_UpdateClass0_HTTP_Handler(srv ClassServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateClassRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClassServiceUpdateClass)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateClass(ctx, req.(*UpdateClassRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateClassReply)
		return ctx.Result(200, reply)
	}
}

func _ClassService_DeleteClass0_HTTP_Handler(srv ClassServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteClassRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClassServiceDeleteClass)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteClass(ctx, req.(*DeleteClassRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteClassReply)
		return ctx.Result(200, reply)
	}
}

func _ClassService_ListClass0_HTTP_Handler(srv ClassServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListClassRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClassServiceListClass)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListClass(ctx, req.(*ListClassRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListClassReply)
		return ctx.Result(200, reply)
	}
}

func _ClassService_GetClass0_HTTP_Handler(srv ClassServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetClassRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClassServiceGetClass)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetClass(ctx, req.(*GetClassRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetClassReply)
		return ctx.Result(200, reply)
	}
}

func _ClassService_ExportClassExcel0_HTTP_Handler(srv ClassServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExportClassExcelRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClassServiceExportClassExcel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExportClassExcel(ctx, req.(*ExportClassExcelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExportClassExcelReply)
		return ctx.Result(200, reply)
	}
}

type ClassServiceHTTPClient interface {
	CreateClass(ctx context.Context, req *CreateClassRequest, opts ...http.CallOption) (rsp *CreateClassReply, err error)
	DeleteClass(ctx context.Context, req *DeleteClassRequest, opts ...http.CallOption) (rsp *DeleteClassReply, err error)
	ExportClassExcel(ctx context.Context, req *ExportClassExcelRequest, opts ...http.CallOption) (rsp *ExportClassExcelReply, err error)
	GetClass(ctx context.Context, req *GetClassRequest, opts ...http.CallOption) (rsp *GetClassReply, err error)
	ListClass(ctx context.Context, req *ListClassRequest, opts ...http.CallOption) (rsp *ListClassReply, err error)
	UpdateClass(ctx context.Context, req *UpdateClassRequest, opts ...http.CallOption) (rsp *UpdateClassReply, err error)
}

type ClassServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewClassServiceHTTPClient(client *http.Client) ClassServiceHTTPClient {
	return &ClassServiceHTTPClientImpl{client}
}

func (c *ClassServiceHTTPClientImpl) CreateClass(ctx context.Context, in *CreateClassRequest, opts ...http.CallOption) (*CreateClassReply, error) {
	var out CreateClassReply
	pattern := "/v1/class"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClassServiceCreateClass))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClassServiceHTTPClientImpl) DeleteClass(ctx context.Context, in *DeleteClassRequest, opts ...http.CallOption) (*DeleteClassReply, error) {
	var out DeleteClassReply
	pattern := "/v1/class/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClassServiceDeleteClass))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClassServiceHTTPClientImpl) ExportClassExcel(ctx context.Context, in *ExportClassExcelRequest, opts ...http.CallOption) (*ExportClassExcelReply, error) {
	var out ExportClassExcelReply
	pattern := "/v1/class/export/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClassServiceExportClassExcel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClassServiceHTTPClientImpl) GetClass(ctx context.Context, in *GetClassRequest, opts ...http.CallOption) (*GetClassReply, error) {
	var out GetClassReply
	pattern := "/v1/class/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClassServiceGetClass))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClassServiceHTTPClientImpl) ListClass(ctx context.Context, in *ListClassRequest, opts ...http.CallOption) (*ListClassReply, error) {
	var out ListClassReply
	pattern := "/v1/class/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClassServiceListClass))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClassServiceHTTPClientImpl) UpdateClass(ctx context.Context, in *UpdateClassRequest, opts ...http.CallOption) (*UpdateClassReply, error) {
	var out UpdateClassReply
	pattern := "/v1/class"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClassServiceUpdateClass))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
